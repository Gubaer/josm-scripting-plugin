plugins {
    id 'org.openstreetmap.josm' version '0.8.1'
    id 'java'
    id 'groovy'
    id 'eclipse'
}

// fixes a problem with the gradle build
//   org.gradle.api.InvalidUserCodeException: Entry module-info.class is a duplicate but no duplicate
//   handling strategy has been set. Please refer to
//   https://docs.gradle.org/7.4.2/dsl/org.gradle.api.tasks.Copy.html#org.gradle.api.tasks.Copy:duplicatesStrategy
//   for details.
tasks.withType(Jar).all {
    duplicatesStrategy 'exclude'
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    graalvm
}

dependencies {
    def graalvmVersion = project.properties["graalvm.version"]

    implementation group: 'org.apache.groovy', name: 'groovy-all', version: '4.0.2'
    implementation group: "org.python", name: "jython", version: "2.7.2"
    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'

    implementation group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.9.6'
    implementation group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '3.2.0'

    // graalvm
    implementation group: 'org.graalvm.sdk', name: 'graal-sdk', version: graalvmVersion
    implementation group: 'org.graalvm.truffle', name: 'truffle-api', version: graalvmVersion
    implementation group: 'org.graalvm.js', name: 'js', version: graalvmVersion
    graalvm group: 'org.graalvm.sdk', name: 'graal-sdk', version: graalvmVersion
    graalvm group: 'org.graalvm.truffle', name: 'truffle-api', version: graalvmVersion
    graalvm group: 'org.graalvm.js', name: 'js', version: graalvmVersion


    packIntoJar group: "org.mozilla", name: "rhino", version: "1.7.14"
    packIntoJar group: 'javax.validation', name: 'validation-api', version: '1.0.0.GA'
    packIntoJar group: 'javax.activation', name: 'activation', version: '1.1.1'
    packIntoJar group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.9.10'
    packIntoJar group: 'com.fifesoft', name: 'rsyntaxtextarea', version: '3.2.0'


    testImplementation('org.openstreetmap.josm:josm-unittest:latest'){changing=true}
    testImplementation group: 'org.jmockit', name: 'jmockit', version: '1.40'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation group: 'org.apache.groovy', name: 'groovy-all', version: '4.0.2'
    testImplementation group: 'org.apache.groovy', name: 'groovy-test', version: '4.0.2'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.27.2'
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '4.2.0'

    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

def releases = Releases.fromFile(file("releases.yml"))

def deriveJosmCompileVersion(releases) {
    final value = project.hasProperty("plugin.josmCompileVersion")
        ? project.property("plugin.josmCompileVersion")
        : null
    def josmCompileVersion
    switch (value) {
        case null:
            josmCompileVersion = "latest"
            break
        case "latest":
        case "tested":
            josmCompileVersion = value
            break
        case "release":
            josmCompileVersion = releases.getLastCompatibleJosmVersion()
            break
        default:
            josmCompileVersion = value.isInteger() ? value as Integer : "latest"
    }
    return josmCompileVersion
}

def configuredJsmCompileVersion = deriveJosmCompileVersion(releases)
logger.info("Compiling for JOSM ${configuredJsmCompileVersion}")

version = releases.currentPluginLabel
archivesBaseName = "scripting"

task dumpGraalVMJars() {
    doLast {
        println "GRAALVM_CLASS_PATH=" + configurations.graalvm.asPath
    }
}

josm {
    josmCompileVersion = configuredJsmCompileVersion
    manifest {
        minJosmVersion = releases.highestJosmVersion

        // Old releases up to v0.2.0 have a numeric ID and are available as raw asset from the github repo.
        // Newer releases starting from v0.2.0 use semantic versioning and are available as asset from
        // a github release.
        releases.josmVersions.each {josmVersion ->
            final label = releases.highestPluginLabelForJosmVersion(josmVersion)
            if (label.isNumber()) {
                oldVersionDownloadLink josmVersion, label,
                new URL("https://raw.github.com/Gubaer/josm-scripting-plugin/for-josm-$josmVersion/dist/scripting.jar")
            } else {
                oldVersionDownloadLink josmVersion, label,
                new URL("https://github.com/Gubaer/josm-scripting-plugin/releases/download/$label/scripting.jar")
            }
        }
    }

    i18n {
        copyrightHolder = "Gubaer"
        //pathTransformer = getGithubPathTransformer('Gubaer/josm-scripting-plugin')
    }

    github {
        repositoryOwner = project.property("josm.github.user")
        repositoryName = project.property("josm.github.repository")
        targetCommitish = "master"
    }
}

jar {
    from("src/main/javascript/v1") {
        into("js/v1")
        include("**/*.js")
    }

    from("src/main/javascript/v2") {
        into("js/v2")
        include("**/*.js")
    }
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
}

import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.openstreetmap.josm.plugins.scripting.build.Releases

import java.nio.file.Files

/**
 * Replies the 'josm.home' directories used in tests
 */
File josmHomeForTests() {
    return new File(project.projectDir, "build/josm.home")
}

test {
    useJUnitPlatform()
    environment "JOSM_SCRIPTING_PLUGIN_HOME", project.projectDir
    environment "TEST_COMMONJS_MODULE_REPO",
            "${project.projectDir}/src/test/resources/require"
    environment "BUILTIN_COMMONJS_MODULE_REPO",
            "${project.projectDir}/src/main/javascript/v2"
    systemProperty "josm.home", josmHomeForTests().absolutePath
    scanForTestClasses = false
    include "org/openstreetmap/josm/plugins/scripting/js/**/*.class"
    include "org/openstreetmap/josm/plugins/scripting/model/*.class"
    include "org/openstreetmap/josm/plugins/scripting/preferences/graalvm/GraalVMPrivilegesModelTest.class"
    include "org/openstreetmap/josm/plugins/scripting/ui/console/*.class"
    testLogging.events TestLogEvent.FAILED, TestLogEvent.PASSED
}

task testScriptApiV1 (type: Test) {
    useJUnitPlatform()
    environment "JOSM_SCRIPTING_PLUGIN_HOME", project.projectDir
    scanForTestClasses = false
    include "org/openstreetmap/josm/plugins/scripting/rhino/api/APIV1TestSuite.class"
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

def getGraalVMHome() {
    if (!project.hasProperty("graalvm.version")) {
        throw new GradleException("Missing mandatory project property 'graalvm.version'")
    }
    final version = project.property("graalvm.version")
    if (!project.hasProperty("graalvm.jdk")) {
        throw new GradleException("Missing mandatory project property 'jdk'")
    }
    final jdk = project.property("graalvm.jdk")
    return new File(project.projectDir, "software/graalvm-ce-$jdk-$version")
}

task testScriptApiV2(type: Test) {
    dependsOn "downloadGraalVM"
    useJUnitPlatform()
    testLogging {
        outputs.upToDateWhen {false}
        showStandardStreams = true
    }
    environment "JOSM_SCRIPTING_PLUGIN_HOME", project.projectDir
    executable new File(getGraalVMHome(), "bin/java").absolutePath
    environment "JAVA_HOME", getGraalVMHome().absolutePath
    scanForTestClasses= false
    include "org/openstreetmap/josm/plugins/scripting/graalvm/api/APIV2TestSuite.class"

    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

task testGraalVMSupportNotPresent(type: Test) {
    // remove GraalVM from classpath under test
    classpath = classpath.filter {! it.toString().toLowerCase().contains("graalvm")}
    useJUnitPlatform()
    scanForTestClasses= false
    include "**/graalvm/GraalVMNotPresentTest.class"
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

import java.nio.file.Paths
import java.nio.file.StandardCopyOption
task testGraalVMSupportPresent(type: Test) {
    doFirst {
        // prepare a suitable 'preferences.xml' for the test cases in this
        // executed by this task
        def josmHome = josmHomeForTests()
        josmHome.mkdirs()
        Files.copy(
            Paths.get("${project.projectDir}/src/test/resources/josm-test-environments/env01/preferences.xml"),
            Paths.get("${josmHome.absolutePath}preferences.xml"),
            StandardCopyOption.REPLACE_EXISTING
        )
        println("testGraalVMSupportPresent: prepared preferences.xml")
    }
    useJUnitPlatform()
    environment "JOSM_SCRIPTING_PLUGIN_HOME",project.projectDir
    systemProperty "josm.home", josmHomeForTests().absolutePath
    scanForTestClasses= false
    include "**/graalvm/GraalVMPresentTest.class"
    include "**/graalvm/GraalVMEvalTest.class"
    include "**/graalvm/GraalVMEmbeddedInJOSMTest.class"
    include "**/graalvm/GraalVMAndRequireTest.class"
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

task testWithGraalVMJDK(type: Test) {
    dependsOn "downloadGraalVM"
    useJUnitPlatform()
    environment "JOSM_SCRIPTING_PLUGIN_HOME", project.projectDir
    scanForTestClasses= false
    executable new File(getGraalVMHome(), "bin/java").absolutePath
    environment "JAVA_HOME", getGraalVMHome()

    include "**/graalvm/GraalVMPresentTest.class"
    include "**/graalvm/GraalVMEvalTest.class"
    include "**/graalvm/GraalVMEmbeddedInJOSMTest.class"
    include "**/graalvm/GraalVMAndRequireTest.class"
    include "**/graalvm/ScriptingAPIV2Test.class"
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

task testJSR223EnginePresent(type: Test) {
    useJUnitPlatform()

    // groovy and python are on the classpath
    scanForTestClasses= false
    include "org/openstreetmap/josm/plugins/scripting/jsr223/JSR223CompatibleEnginePresentTest.class"
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

tasks.check.dependsOn(tasks.testScriptApiV1)
tasks.check.dependsOn(tasks.testScriptApiV2)
tasks.check.dependsOn(tasks.testGraalVMSupportNotPresent)
tasks.check.dependsOn(tasks.testGraalVMSupportPresent)
tasks.check.dependsOn(tasks.testJSR223EnginePresent)
tasks.check.dependsOn(tasks.testWithGraalVMJDK)

sourceSets {
    test {
        java.srcDirs = [
            "src/test/unit/java",
            "src/test/functional/java",
            "src/test/common/java"
        ]
        groovy.srcDirs = [
            "src/test/unit/groovy",
            "src/test/functional/groovy"
        ]
    }
}
processResources {
  from "$projectDir/README.md"
  from "$projectDir/LICENSE"
}

import org.openstreetmap.josm.plugins.scripting.build.GraalVMDownloadTask
tasks.register("downloadGraalVM", GraalVMDownloadTask)

import org.openstreetmap.josm.plugins.scripting.CheckDownloadUrlsInManifestTask
tasks.register("checkDownloadUrls", CheckDownloadUrlsInManifestTask)

import org.openstreetmap.josm.plugins.scripting.release.ShowPublishedPluginTask
tasks.register("showPublishedPluginInfo", ShowPublishedPluginTask)

import org.openstreetmap.josm.plugins.scripting.release.PublishToAwsS3Task
tasks.register("publishToAwsS3", PublishToAwsS3Task)

publishToGithubRelease {
    remoteJarName = "scripting.jar"
}

