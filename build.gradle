plugins {
    id 'org.openstreetmap.josm' version '0.5.0'
    id 'java'
    id 'groovy'
    id 'eclipse'
}

def currentPluginVersion(config) {
    return config.releases.collect {it.pluginVersion}.max()
}

def currentPluginMainVersion(config) {
    return config.releases.collect {it.josmVersion}.max()
}

def bestPluginVersion(config, josmVersion) {
    return config.releases
        .findAll{it.josmVersion == josmVersion}
        .collect{it.pluginVersion}
        .max()
}

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.12'
    implementation group: "org.python", name: "jython", version: "2.7.0"
    implementation group: 'javax.activation', name: 'activation', version: '1.1.1'
    implementation group: 'org.graalvm.sdk', name: 'graal-sdk', version: '19.1.0'
    implementation group: 'org.graalvm.truffle', name: 'truffle-api', version: '19.1.0'
    implementation group: 'org.graalvm.js', name: 'js', version: '19.1.0'
    implementation group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.9.6'

    packIntoJar group: "org.mozilla", name: "rhino", version: "1.7.7.1"
    packIntoJar group: "de.sciss", name: "jsyntaxpane", version: "1.0.0"
    packIntoJar group: 'javax.validation', name: 'validation-api', version: '1.0.0.GA'
    packIntoJar group: 'javax.activation', name: 'activation', version: '1.1.1'
    packIntoJar group: 'com.github.spullara.mustache.java', name: 'compiler', version: '0.9.6'
    packIntoJar group: 'org.graalvm.sdk', name: 'graal-sdk', version: '19.1.0'
    packIntoJar group: 'org.graalvm.truffle', name: 'truffle-api', version: '19.1.0'
    packIntoJar group: 'org.graalvm.js', name: 'js', version: '19.1.0'

    testImplementation('org.openstreetmap.josm:josm-unittest:latest'){changing=true}
    testImplementation group: 'org.jmockit', name: 'jmockit', version: '1.40'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.12'
    testImplementation group: 'com.github.tomakehurst', name: 'wiremock', version: '2.18.0'
    testImplementation group: 'org.awaitility', name: 'awaitility', version: '3.1.2'
}

def ConfigObject releaseHistory = new ConfigSlurper().parse(file("releases.conf").text)

version = currentPluginVersion(releaseHistory)
archivesBaseName = "scripting"

josm {
    josmCompileVersion = "latest"
    manifest {
        description = 'Runs scripts in JOSM'
        minJosmVersion = currentPluginMainVersion(releaseHistory)
        mainClass = 'org.openstreetmap.josm.plugins.scripting.ScriptingPlugin'
        iconPath = 'images/script-engine.png'
        website = new URL("https://gubaer.github.io/josm-scripting-plugin")
        canLoadAtRuntime = true

        releaseHistory.releases.collect{it.josmVersion}.unique().sort().each {jv ->
            def String dv = bestPluginVersion(releaseHistory, jv)
            oldVersionDownloadLink jv, dv, new URL("https://raw.github.com/Gubaer/josm-scripting-plugin/for-josm-${jv}/dist/scripting.jar")
        }
    }
    i18n {
        copyrightHolder = "Gubaer"
        //pathTransformer = getGithubPathTransformer('Gubaer/josm-scripting-plugin')
    }
}

jar {
    from("src") {
      include("**/*.dtd")
    }

    from("src/main/javascript/v1") {
      into("js/v1")
      include("**/*.js")
    }

    from("src/main/javascript/v2") {
      into("js/v2")
      include("**/*.js")
    }
}

compileJava {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror"
}

import org.gradle.api.tasks.testing.logging.TestLogEvent
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

test {
    useJUnit()
    environment "JOSM_SCRIPTING_PLUGIN_HOME", project.projectDir
    environment "TEST_COMMONJS_MODULE_REPO",
            "${project.projectDir}/test/data/require/modules"
    environment "BUILTIN_COMMONJS_MODULE_REPO",
            "${project.projectDir}/src/main/javascript/v2"
    scanForTestClasses = false
    include "**/AllUnitTests.class"
    testLogging.events TestLogEvent.FAILED, TestLogEvent.PASSED
}

task testScriptApi (type: Test) {
    useJUnit()
    environment "JOSM_SCRIPTING_PLUGIN_HOME", project.projectDir
    scanForTestClasses = false
    include "ScriptApiTest.class"
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

task testGraalVMSupportNotPresent(type: Test) {
    // remove GraalVM from classpath under test
    classpath = classpath.filter {! it.toString().toLowerCase().contains("graalvm")}
    useJUnit()
    scanForTestClasses= false
    include "**/graalvm/GraalVMNotPresentTest.class"
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

task testGraalVMSupportPresent(type: Test) {
    useJUnit()
    scanForTestClasses= false
    include "**/graalvm/GraalVMPresentTest.class"
    include "**/graalvm/GraalVMEvalTest.class"
    include "**/graalvm/GraalVMEmbeddedInJOSMTest.class"
    include "**/graalvm/GraalVMAndRequireTest.class"
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

task testWithGraalVMJDK(type: Test) {
    useJUnit()
    scanForTestClasses= false
    executable "/home/karl/software/graalvm/bin/java"
    environment "JAVA_HOME", "/home/karl/software/graalvm"
    include "**/graalvm/GraalVMPresentTest.class"
    include "**/graalvm/GraalVMEvalTest.class"
    include "**/graalvm/GraalVMEmbeddedInJOSMTest.class"
    include "**/graalvm/GraalVMAndRequireTest.class"
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

task testJSR223EngineAbsent(type: Test) {
    useJUnit()

    // make sure neither a graalvm, nor groovy or python are on the
    // classpath
    classpath = classpath
            .filter {! it.toString().toLowerCase().contains("graalvm")}
            .filter {! it.toString().toLowerCase().contains("groovy")}
            .filter {! it.toString().toLowerCase().contains("python")}

    scanForTestClasses= false
    include "**/jsr223/JSR223CompatibleEngineAbsentTest.class"
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

task testJSR223EnginePresent(type: Test) {
    useJUnit()

    // groovy and python are on the classpath
    scanForTestClasses= false
    include "**/jsr223/JSR223CompatibleEnginePresentTest.class"
    testLogging {
        events TestLogEvent.FAILED, TestLogEvent.PASSED
        exceptionFormat = TestExceptionFormat.FULL
    }
}

tasks.check.dependsOn(tasks.testScriptApi)
tasks.check.dependsOn(tasks.testGraalVMSupportNotPresent)
tasks.check.dependsOn(tasks.testGraalVMSupportPresent)
tasks.check.dependsOn(tasks.testJSR223EngineAbsent)
tasks.check.dependsOn(tasks.testJSR223EnginePresent)
tasks.check.dependsOn(tasks.testWithGraalVMJDK)

sourceSets {
    test {
        java.srcDirs = [
            "src/test/unit/java",
            "src/test/functional/java",
            "test/script-api",  // deprecated
            "test/common",      // deprecated
            "test/unit",        // deprecated
            "test/functional"   // deprecated
        ]
        groovy.srcDirs = [
            "src/test/unit/groovy",
            "src/test/functional/groovy",
            "test/unit",        // deprecated
            "test/functional"   // deprecated
        ]
        resources {
            srcDir "test/unit"
        }
    }
}
processResources {
  from "$projectDir/README.md"
  from "$projectDir/LICENSE"
}

tasks.dist.into("$projectDir/dist")
task deploy {
    dependsOn dist
    doLast {
        def config = new ConfigSlurper().parse(file("releases.conf").text)
        def deployBranch = "deploy"
        def jar = "$projectDir/dist/${archivesBaseName}.jar";
        Git.ensureOnBranch(deployBranch)
        Git.add(jar)
        Git.commit(jar, "commited plugin build ${currentPluginVersion(config)}")
        def tag = "for-josm-${currentPluginMainVersion(config)}"
        Git.tagHead(tag)
        Git.push("origin", deployBranch)
        Git.pushTags()
    }
}

class Git {

    static private def executeAndLog(cmd) {
        def proc = cmd.execute()
        proc.waitFor()
        println "Exit Value: ${proc.exitValue()}"
        println "Output: ${proc.in.text}"
        println "Error: ${proc.err.text}"
        if (proc.exitValue() != 0) {
            throw new Error("git command failed. command was <$cmd>")
        }
    }

    static def ensureOnBranch(branch) {
        def proc = "git rev-parse --abbrev-ref HEAD".execute()
        def ret = proc.in.text.trim()
        if (ret != branch) {
            throw new Error("currently on branch '$ret', but expected branch '$branch'")
        }
    }

    static def add(file) {
        executeAndLog(["git", "add", file])
    }

    static def commit(file, message) {
        executeAndLog(["git", "commit", "-m", message, file])
    }

    static def push(remote, branch) {
        executeAndLog("git push $remote $branch")
    }

    static def tagHead(tag) {
        executeAndLog(["git", "tag", "-f", tag, "HEAD"])
    }

    static def pushTags() {
        executeAndLog("git push --tags -f")
    }
}
