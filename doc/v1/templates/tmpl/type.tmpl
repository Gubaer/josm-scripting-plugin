<?js
'use strict';
/*
*    doclet     -  the doclet for which the type page is generated
*    data       - the complete doclet data
*    ViewHelper  - the loaded ViewHelper module
*/
const ViewHelper = obj.ViewHelper;
const self = this;
const vh = new ViewHelper(data);

?>
<div class="apidoc">
<h1 class="title"><?js= vh.buildTitleForType(doclet) ?></h1>
<?js= vh.resolveClassReferences(doclet.description) ?>

<?js= self.partial("type/examples.tmpl", doclet.examples) ?>
<?js= self.partial("type/membersummary.tmpl",obj) ?>

<?js if (doclet.augments)  {   ?>
<p>This mixin extends the mixin <?js= vh.resolveTypes(doclet.augments) ?>.
Properties and methods of the parent mixin are available for scripting, too.</p>
<?js }  /* END if doclet.augments */ ?>

<?js if (doclet.forclass)  {   ?>
<p>This mixin provides additional properties and methods for the native Java
class  <?js= vh.resolveTypes(doclet.forclass) ?>, whose native public methods
are available for scripting, too. If a native method name is hidden by a
property name in the mixin, then prefix the native name with <code>$</code>.
</p>
<?js }  /* END if doclet.forclass */ ?>

<?js= self.partial("type/constructor.tmpl", obj) ?>
<?js= self.partial("type/properties.tmpl", obj) ?>
<?js= self.partial("type/methods.tmpl", obj) ?>
</div>
