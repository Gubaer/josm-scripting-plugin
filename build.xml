<?xml version="1.0" encoding="UTF-8"?>

<project name="scripting" default="dist" basedir=".">

	<!--
	* Set local build properties in the external property file 'build.properties'.
	* If it doesn't exist yet, create a copy from the template file 'build.properties.template'
	* 
	-->
	<property file="build.properties" />

	<!--
      * Shouldn't be necessary to change the following properties
     -->
	<property name="plugin.build.dir" value="build" />
	<property name="plugin.src.dir" value="src" />
	<!-- this is the directory where the plugin jar is copied to -->
	<property name="plugin.dist.dir" value="dist" />
	<property name="plugin.jar" value="${plugin.dist.dir}/scripting.jar" />

	<path id="compile.path">
		<pathelement location="${josm.jar}" />
		<pathelement location="${jsyntaxpane.jar}" />
	</path>

	<!--
    **********************************************************
    ** init - initializes the build
    **********************************************************
    -->
	<target name="init">
		<available file="build.properties" property="build.properties.present" />
		<fail unless="build.properties.present">	    	
** Property file 'build.properties' doesn't exist.
** Create a copy from 'build.properties.template' and update the properties
** according to your local environment.
</fail>
		<mkdir dir="${plugin.build.dir}" />
		<mkdir dir="${plugin.dist.dir}" />
	</target>

	<!--
    **********************************************************
    ** compile - complies the source tree
    **********************************************************
    -->
	<target name="compile" depends="init">
		<echo message="compiling sources for  ${plugin.jar} ... " />
		<javac srcdir="src" classpathref="compile.path" debug="true" destdir="${plugin.build.dir}">
			<compilerarg value="-Xlint:deprecation" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>

	<!--
    **********************************************************
    ** dist - creates the plugin jar
    **********************************************************
    -->
	<target name="dist" depends="compile">
		<copy todir="${plugin.build.dir}/images">
			<fileset dir="images">
				<include name="**/*.png" />
			</fileset>
		</copy>

		<copy todir="${plugin.build.dir}/resources">
			<fileset dir="resources">
				<include name="*" />
			</fileset>
		</copy>

		<copy todir="${plugin.build.dir}/scripts">
			<fileset dir="scripts">
				<include name="*.groovy" />
			</fileset>
		</copy>

		<copy todir="${plugin.build.dir}">
			<fileset dir=".">
				<include name="README" />
				<include name="LICENSE" />
			</fileset>
		</copy>
		<copy todir="${plugin.build.dir}">
			<fileset dir="${plugin.src.dir}">
				<include name="**/*.dtd" />
			</fileset>
		</copy>
		<copy todir="${plugin.build.dir}/META-INF">
			<fileset dir="resources">
				<include name="mime.types" />
			</fileset>
		</copy>
		<jar destfile="${plugin.jar}" basedir="${plugin.build.dir}">
			<zipfileset src="${jsyntaxpane.jar}" />
			<manifest>
				<attribute name="Author" value="Karl Guggisberg" />
				<attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.scripting.ScriptingPlugin" />
				<attribute name="Plugin-Date" value="${plugin.build.date}" />
				<attribute name="Plugin-Description" value="Allows to run scripts in JOSM." />
				<!-- <attribute name="Plugin-Icon" value="" /> -->
				<attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/index.php/JOSM/Plugins/Scripting" />
				<attribute name="Plugin-Mainversion" value="${josm.version}" />
				<attribute name="Plugin-Version" value="${plugin.version}" />
			</manifest>
		</jar>
	</target>

	<!--
    **********************************************************
    ** clean - clean up the build environment
    **********************************************************
    -->
	<target name="clean">
		<delete dir="${plugin.build.dir}" />
		<delete dir="${plugin.dist.dir}" />
	</target>

	<!-- ************************************************************************************ -->
	<!-- * Targets for compiling and running tests                                            -->
	<!-- ************************************************************************************ -->
	<property name="test.build.dir" value="test/build" />

	<path id="test.class.path">
		<pathelement location="${josm.jar}" />
		<pathelement location="${plugin.build.dir}" />
		<pathelement location="${groovy.jar}" />
		<pathelement location="${junit.jar}" />
	</path>

	<path id="groovyc.path">
		<pathelement location="${groovy.jar}" />
		<pathelement location="${junit.jar}" />
		<pathelement location="${josm.jar}" />
		<pathelement location="${test.build.dir}" />
		<pathelement location="${plugin.build.dir}" />
	</path>

	<target name="test-clean">
		<delete dir="${test.build.dir}" />
		<mkdir dir="${test.build.dir}" />
	</target>

	<target name="test-compile" depends="compile,test-clean" description="Compiles the test files">

		<available classname="org.codehaus.groovy.ant.Groovy" classpathref="groovyc.path" property="groovy.present" />
		<fail message="Groovy not found. Make sure groovy is on the classpath. Check 'groovy.path' in this build file." unless="groovy.present" />

		<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpath="${groovy.jar}" />

		<echo message="compiling test infrastructur for ${plugin.jar} ... " />
		<javac srcdir="test/common" classpathref="test.class.path" debug="true" destdir="${test.build.dir}">
			<compilerarg value="-Xlint:deprecation" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<echo message="compiling functional groovy test cases for ${plugin.jar} ... " />
		<groovyc srcdir="test/functional" destdir="${test.build.dir}" classpathref="groovyc.path">
		</groovyc>

		<echo message="compiling functional java test cases for ${plugin.jar} ... " />
		<javac srcdir="test/functional" classpathref="test.class.path" debug="true" destdir="${test.build.dir}">
			<compilerarg value="-Xlint:deprecation" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<echo message="compiling unit groovy test cases for ${plugin.jar} ... " />
		<groovyc srcdir="test/unit" destdir="${test.build.dir}" classpathref="groovyc.path">
		</groovyc>

		<echo message="compiling unit java test cases for ${plugin.jar} ... " />
		<javac srcdir="test/unit" classpathref="test.class.path" debug="true" destdir="${test.build.dir}">
			<compilerarg value="-Xlint:deprecation" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>

	<target name="test-run" depends="test-compile" description="Runs the junit tests">
		<delete dir="test/output" />
		<mkdir dir="test/output" />

		<junit printsummary="true" failureproperty="junit.failure">
			<classpath>
				<path refid="groovyc.path" />
				<pathelement location="test/config" />
				<!-- required for test config file -->
				<pathelement location="." />
				<!-- required to load images from subdir 'images/' -->
			</classpath>

			<!-- no tests yet 
			<test todir="test/output" name=''>
				<formatter type="xml" />
			</test>
			-->
		</junit>
	</target>

	<target name="dev-install" depends="dist">
		<echo>Installing the plugin in ${local.install.path}</echo>
		<copy file="${plugin.jar}" todir="${local.install.path}" />
	</target>
</project>
