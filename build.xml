<?xml version="1.0" encoding="UTF-8"?>
<project name="scripting" default="dist" basedir=".">

	<property name="plugin.build.dir" value="build" />
	<property name="plugin.src.dir" value="src" />
	<property name="plugin.dist.dir" value="dist" />
	<property name="plugin.jar" value="${plugin.dist.dir}/scripting.jar" />


	<target name="init">
		<available file="build.properties" property="build.properties.present" />
		<fail unless="build.properties.present">**				
** Property file 'build.properties' doesn't exist.
** Create a copy from 'build.properties.template' and update the properties
** according to your local environment.
</fail>
		<property file="build.properties" />

		<path id="compile.path">
			<pathelement location="${josm.jar}" />
			<pathelement location="${jsyntaxpane.jar}" />
			<pathelement location="${rhino.jar}" />
		</path>

		<mkdir dir="${plugin.build.dir}" />
		<mkdir dir="${plugin.dist.dir}" />
		
		<taskdef name="groovy"
		         classname="org.codehaus.groovy.ant.Groovy"
		         classpath="${groovy.jar}" />
	</target>

	<target name="compile" depends="init">
		<echo message="compiling sources for  ${plugin.jar} ... " />
		<javac srcdir="src" classpathref="compile.path" debug="true" destdir="${plugin.build.dir}">
			<compilerarg value="-Xlint:deprecation" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>

	<target name="make-dist" description="Create the plugin jar">
		<tstamp>
			<format property="plugin.build.date" pattern="yyyy-MM-dd hh:mm aa" />
		</tstamp>

		<copy todir="${plugin.build.dir}/images">
			<fileset dir="images">
				<include name="**/*.png" />
			</fileset>
		</copy>

		<copy todir="${plugin.build.dir}/resources">
			<fileset dir="resources">
				<include name="*" />
			</fileset>
		</copy>

		<copy todir="${plugin.build.dir}/scripts">
			<fileset dir="scripts">
				<include name="**/*.groovy" />
				<include name="**/*.py" />
				<include name="**/*.jy" />
				<include name="**/*.js" />
			</fileset>
		</copy>

		<copy todir="${plugin.build.dir}">
			<fileset dir=".">
				<include name="README" />
				<include name="LICENSE" />
				<include name="README.*" />
				<include name="LICENSE.*" />
			</fileset>
		</copy>
		<copy todir="${plugin.build.dir}">
			<fileset dir="${plugin.src.dir}">
				<include name="**/*.dtd" />
			</fileset>
		</copy>

		<copy todir="${plugin.build.dir}/js">
			<fileset dir="javascript">
				<include name="**/*.js" />
			</fileset>
		</copy>

		<copy todir="${plugin.build.dir}/META-INF">
			<fileset dir="resources">
				<include name="mime.types" />
			</fileset>
		</copy>
		<jar destfile="${plugin.jar}" basedir="${plugin.build.dir}" manifest="version-information.MF">
			<!--
			We have to "unfold" 3d-party jars in the plugin jar. Otherwise, the JOSM plugin class loader
			will not find them. 
			-->
			<zipfileset src="${jsyntaxpane.jar}" />
			<zipfileset src="${rhino.jar}" />
			<manifest>
				<attribute name="Author" value="Karl Guggisberg" />
				<attribute name="Plugin-Class" value="org.openstreetmap.josm.plugins.scripting.ScriptingPlugin" />
				<attribute name="Plugin-Date" value="${plugin.build.date}" />
				<attribute name="Plugin-Description" value="Allows to run scripts in JOSM." />
				<attribute name="Plugin-Link" value="http://wiki.openstreetmap.org/index.php/JOSM/Plugins/Scripting" />
				<attribute name="Plugin-Mainversion" value="${josm.required.version}" />
				<attribute name="Plugin-Version" value="${plugin.version}" />
			</manifest>
		</jar>
	</target>
	
	<target name="dist" depends="clean,init,compile,create-version-info-for-manifest,make-dist" description="Create the plugin jar">
	</target>

	<target name="clean" description="Clean the build environment">
		<delete dir="${plugin.build.dir}" />
		<delete dir="${plugin.dist.dir}" />
	</target>

	<!-- ************************************************************************************ -->
	<!-- * Targets for compiling and running tests                                            -->
	<!-- ************************************************************************************ -->
	<property name="test.build.dir" value="test/build" />

	<path id="test.class.path">
		<pathelement location="${josm.jar}" />
		<pathelement location="${plugin.build.dir}" />
		<pathelement location="${groovy.jar}" />
		<pathelement location="${junit.jar}" />
		<pathelement location="${test.build.dir}" />
	</path>

	<target name="test.clean">
		<delete dir="${test.build.dir}" />
		<mkdir dir="${test.build.dir}" />
		<delete dir="test/output" />
		<mkdir dir="test/output" />
	</target>

	<target name="test.init" depends="init" description="Initializes the test environment">
		<path id="test.class.path">
			<pathelement location="${josm.jar}" />
			<pathelement location="${plugin.build.dir}" />
			<pathelement location="${groovy.jar}" />
			<pathelement location="${junit.jar}" />
			<pathelement location="${test.build.dir}" />
		</path>
		<available classname="org.codehaus.groovy.ant.Groovy" classpath="${groovy.jar}" property="groovy.present" />
		<fail unless="groovy.present">**
** Groovy not found. Make sure groovy is on the classpath. 
** Check 'groovy.all.jar' in the build.properties.
		    </fail>
		<taskdef name="groovyc" classname="org.codehaus.groovy.ant.Groovyc" classpath="${groovy.jar}"/>
	</target>

	<target name="test.compile" depends="compile,test.clean,test.init" description="Compiles the test files">
		<echo message="compiling test infrastructur for ${plugin.jar} ... " />
		<javac srcdir="test/common" classpathref="test.class.path" debug="true" destdir="${test.build.dir}">
			<compilerarg value="-Xlint:deprecation" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<echo message="compiling functional groovy test cases for ${plugin.jar} ... " />
		<groovyc srcdir="test/functional" destdir="${test.build.dir}" classpathref="test.class.path">
		</groovyc>

		<echo message="compiling functional java test cases for ${plugin.jar} ... " />
		<javac srcdir="test/functional" classpathref="test.class.path" debug="true" destdir="${test.build.dir}">
			<compilerarg value="-Xlint:deprecation" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>

		<echo message="compiling unit groovy test cases for ${plugin.jar} ... " />
		<groovyc srcdir="test/unit" destdir="${test.build.dir}" classpathref="test.class.path">
		</groovyc>

		<echo message="compiling unit java test cases for ${plugin.jar} ... " />
		<javac srcdir="test/unit" classpathref="test.class.path" debug="true" destdir="${test.build.dir}">
			<compilerarg value="-Xlint:deprecation" />
			<compilerarg value="-Xlint:unchecked" />
		</javac>
	</target>

	<target name="test.run" depends="test.compile" description="Runs the junit tests">
		<junit printsummary="true" failureproperty="junit.failure">
			<classpath>
				<path refid="test.class.path" />
				<pathelement location="test/config" />
				<!-- required for test config file -->
				<pathelement location="." />
				<!-- required to load images from subdir 'images/' -->
			</classpath>

			<!-- no tests yet 
			<test todir="test/output" name=''>
				<formatter type="xml" />
			</test>
			-->
		</junit>
	</target>

	<target name="dev-install" depends="dist">
		<echo>Installing the plugin in ${local.install.path}</echo>
		<copy file="${plugin.jar}" todir="${local.install.path}" />
	</target>
	
	<target name="dev-install-js" depends="init,make-dist">
			<echo>refreshing jar and installing the plugin in ${local.install.path}</echo>
			<copy file="${plugin.jar}" todir="${local.install.path}" />
	</target>

	<target name="create-version-info-for-manifest" depends="init" description="Creates the Manifest.MF fragment with the version infor">
		<groovy><![CDATA[		
		   def prop = new java.util.Properties()
		   prop.load (new FileInputStream("build.properties"))
		   def mf = new File("version-information.MF")
		   prop.each {k, v -> 
			  def m = k =~ /^plugin\.(\d+)\.requires$/
			  if (m.matches()) {
			    def vplugin = m[0][1]
			    def vjosm = v			   			    
			    mf << "${vplugin}-Plugin-Url: ${vplugin};https://raw.github.com/Gubaer/josm-scripting-plugin/for-josm-${vjosm}/dist/scripting.jar"
			  }
		  }		  		   
		]]></groovy>
	</target>

	<!-- ************************************************************************************ -->
	<!-- * Targets for javascript API                                                         -->
	<!-- ************************************************************************************ -->

	<target name="js-init" depends="init" description="Init build properties for compiling JavaScript files">		
		<mkdir dir="build"/>
		<delete dir="build/js" />
		<mkdir dir="build/js"/>
		
		<delete dir="${api-doc.staging.dir}"/>
		<mkdir dir="${api-doc.staging.dir}" />
	</target>


	<target name="js-doc" depends="js-init" description="Create the documentation for the JOSM javascript API">
		<echo>Writing API doc to '${api-doc.staging.dir}</echo>
		<exec executable="./jsdoc.sh" failonerror="yes" failifexecutionfails="yes">
			<arg value="-d ${api-doc.staging.dir}"/>
			<arg value="-t templates/josm-scripting-plugin" />			
			<arg value="-c /home/karl/repositories/josm-scripting-plugin/doc/template/conf.json" />
			<arg value="javascript/josm.js"/>
			<arg value="javascript/josm/util.js"/>
			<arg value="javascript/josm/builder.js"/>
			<arg value="javascript/josm/layers.js"/>
			<arg value="javascript/josm/api.js"/>
			<arg value="javascript/josm/command.js"/>
			<arg value="javascript/josm/mixin/RelationMixin.js"/>
			<arg value="javascript/josm/mixin/OsmPrimitiveMixin.js"/>
			<arg value="javascript/josm/mixin/NodeMixin.js"/>
			<arg value="javascript/josm/mixin/WayMixin.js"/>
			<arg value="javascript/josm/mixin/LatLonMixin.js"/>
			<arg value="javascript/josm/mixin/DataSetMixin.js"/>
			<arg value="javascript/josm/mixin/BoundsMixin.js"/>
			<arg value="javascript/josm/mixin/UploadStrategyMixin.js"/>
			<arg value="javascript/josm/mixin/OsmDataLayerMixin.js"/>
			<arg value="javascript/josm/mixin/ChangesetMixin.js"/>
		</exec>
	</target>	
</project>
